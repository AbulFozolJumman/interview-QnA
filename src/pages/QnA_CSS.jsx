import Container from "../components/Shared/Container/Container";

/* eslint-disable react/no-unescaped-entities */
const QnA_CSS = () => {
  return (
    <Container>
      <div className="flex flex-wrap justify-start overflow-hidden bg-green-100 text-green-600 shadow-md mb-2">
        <label className="grow px-4 md:text-[18px]" htmlFor="collapse2">
          01. Difference between CSS{" "}
          <span className="font-bold">flexbox vs grid</span>?
        </label>
        <input
          className="peer p-0 m-0 h-0 w-0 appearance-none rounded border text-slate-800 accent-slate-600 opacity-0"
          type="checkbox"
          name="collapse2"
          id="collapse2"
        />
        <div className="-transparent w-full absolute -translate-y-full scale-75 scale-y-0 px-4 py-1 opacity-0 transition-all duration-0 peer-checked:relative peer-checked:translate-y-0 peer-checked:scale-100 peer-checked:scale-y-100 peer-checked:bg-green-50 text-lg text-black peer-checked:opacity-100">
          The main difference between Flexbox and Grid lies in how they handle
          layout direction and complexity:
          <br />
          ЁЯФ╣ Flexbox is one-dimensional тАФ it works in either a row or a column,
          not both at the same time.
          <br />
          It is best when we need to align items in a single line, either
          horizontally or vertically.
          <br />
          ЁЯФ╣ Grid is two-dimensional тАФ it works in both rows and columns.
          <br />
          It is more powerful for building complex layouts like entire web pages
          or sections with rows and columns together.
          <br />
          Example use:
          <br />
          * Flexbox is perfect for things like navigation bars, button groups,
          or centered content.
          <br />
          * Grid is ideal for creating full page layouts, photo galleries, or
          dashboard designs.
          <br />
          So, I use Flexbox when layout is simple and in one direction, and I
          use Grid when I need more control in both directions.
          <br />
          <br />
          Flexbox ржПржмржВ Grid ржПрж░ ржорзВрж▓ ржкрж╛рж░рзНржержХрзНржп рж╣ржЪрзНржЫрзЗ layout direction ржПржмржВ
          complexityред
          <br />
          ЁЯФ╣ Flexbox рж╣рж▓ ржПржХ-ржбрж╛ржЗржорзЗржирж╢ржирж╛рж▓, ржорж╛ржирзЗ ржПржЯрж┐ ржПржХржмрж╛рж░рзЗ рж╢рзБржзрзБ row ржмрж╛ column-ржП ржХрж╛ржЬ
          ржХрж░рзЗред
          <br />
          ржПржЯрж┐ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж┐ ржпржЦржи рж╢рзБржзрзБржорж╛рждрзНрж░ ржПржХ рж▓рж╛ржЗржирзЗ ржмрж╛ ржПржХржжрж┐ржХрзЗ ржЖржЗржЯрзЗржо рж╕рж╛ржЬрж╛рждрзЗ рж╣рзЯред
          <br />
          ЁЯФ╣ Grid рж╣рж▓ ржжрзБржЗ-ржбрж╛ржЗржорзЗржирж╢ржирж╛рж▓, ржорж╛ржирзЗ ржПржЯрж┐ ржПржХрж╕рж╛ржерзЗ row ржПржмржВ column ржЙржнржпрж╝ ржжрж┐ржХрзЗржЗ
          ржХрж╛ржЬ ржХрж░рзЗред
          <br />
          ржПржЯрж┐ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж┐ ржпржЦржи ржЬржЯрж┐рж▓ layout ржжрж░ржХрж╛рж░ рж╣рзЯ тАФ ржпрзЗржоржи ржкрзБрж░рзЛ ржУрзЯрзЗржм ржкрзЗржЬ ржмрж╛
          ржбрзНржпрж╛рж╢ржмрзЛрж░рзНржб рждрзИрж░рж┐ред
          <br />
          ржЙржжрж╛рж╣рж░ржг:
          <br />
          * Flexbox ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж┐ navbar, button group, ржЕржержмрж╛ ржХрзЛржирзЛ ржПржХржжрж┐ржХрзЗ content
          align ржХрж░рж╛рж░ ржЬржирзНржпред
          <br />
          * Grid ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж┐ ржкрзБрж░рзЛ рж▓рзЗ-ржЖржЙржЯ, photo gallery, ржмрж╛ dashboard layout ржПрж░
          ржЬржирзНржпред
          <br />
          рж╕рж╛рж░рж╕ржВржХрзНрж╖рзЗржкрзЗ, ржпржжрж┐ simple one-direction layout ржжрж░ржХрж╛рж░ рж╣рзЯ, рждрж╛рж╣рж▓рзЗ Flexbox,
          ржЖрж░ ржпржжрж┐ complex row-column layout ржжрж░ржХрж╛рж░ рж╣рзЯ, рждрж╛рж╣рж▓рзЗ Grid ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж┐ред
        </div>
      </div>
      <div className="flex flex-wrap justify-start overflow-hidden bg-green-100 text-green-600 shadow-md mb-2">
        <label className="grow px-4 md:text-[18px]" htmlFor="collapse3">
          02. Explain all CSS{" "}
          <span className="font-bold">position property.</span>
        </label>
        <input
          className="peer p-0 m-0 h-0 w-0 appearance-none rounded border text-slate-800 accent-slate-600 opacity-0"
          type="checkbox"
          name="collapse3"
          id="collapse3"
        />
        <div className="-transparent w-full absolute -translate-y-full scale-75 scale-y-0 px-4 py-1 opacity-0 transition-all duration-0 peer-checked:relative peer-checked:translate-y-0 peer-checked:scale-100 peer-checked:scale-y-100 peer-checked:bg-green-50 text-lg text-black peer-checked:opacity-100">
          There are five main values of the `position` property in CSS:
          <br />
          ЁЯФ╕ 1. Static (default)
          <br />
          * This is the default position for all elements.
          <br />
          * Elements appear in the normal document flow, top to bottom.
          <br />
          * You cannot use top, right, bottom, or left with it.
          <br />
          ЁЯЧгя╕П Example: A paragraph `&#60;p&#62;` will just appear one after
          another.
          <br />
          ЁЯФ╕ 2. Relative
          <br />
          * The element stays in the normal flow, but we can move it relative to
          its original position using `top`, `left`, `right`, `bottom`.
          <br />
          * Space is still reserved for it.
          <br />
          ЁЯЧгя╕П Example: `top: 10px` will move the element 10px down from its
          normal place.
          <br />
          ЁЯФ╕ 3. Absolute
          <br />
          * The element is removed from normal flow.
          <br />
          * It is positioned relative to the nearest positioned ancestor (not
          static).
          <br />
          * If thereтАЩs no such ancestor, it uses the document body.
          <br />
          * Other elements ignore it.
          <br />
          ЁЯЧгя╕П Example: Useful for placing a tooltip or dropdown menu.
          <br />
          ЁЯФ╕ 4. Fixed
          <br />
          * The element is removed from normal flow.
          <br />
          * It is positioned relative to the viewport.
          <br />
          * It doesnтАЩt move when we scroll the page.
          <br />
          ЁЯЧгя╕П Example: A sticky header or back-to-top button.
          <br />
          ЁЯФ╕ 5. Sticky
          <br />
          * ItтАЩs a mix between relative and fixed.
          <br />
          * The element scrolls like relative until a certain point, then
          becomes fixed.
          <br />
          ЁЯЧгя╕П Example: A navigation bar that stays at the top while scrolling
          down.
          <br />
          <br />
          CSS ржПрж░ `position` property ржПрж░ рзлржЯрж┐ ржкрзНрж░ржзрж╛ржи ржорж╛ржи (value) ржЖржЫрзЗ:
          <br />
          ЁЯФ╕ рзз. Static (ржбрж┐ржлрж▓рзНржЯ)
          <br />
          * ржПржЯрж┐ ржкрзНрж░рждрж┐ржЯрж┐ ржПрж▓рж┐ржорзЗржирзНржЯрзЗрж░ default positionред
          <br />
          * ржПрж▓рж┐ржорзЗржирзНржЯржЧрзБрж▓рзЛ рж╕рзНржмрж╛ржнрж╛ржмрж┐ржХ ржирж┐рзЯржорзЗ ржЙржкрж░рзЗ ржерзЗржХрзЗ ржирж┐ржЪрзЗ рж╕рж╛ржЬрж╛ржирзЛ ржерж╛ржХрзЗред
          <br />
          * ржПржЦрж╛ржирзЗ `top`, `left`, `right`, `bottom` ржХрж╛ржЬ ржХрж░рзЗ ржирж╛ред
          <br />
          ЁЯЧгя╕П ржЙржжрж╛рж╣рж░ржг: `&#60;p&#62;` ржПрж▓рж┐ржорзЗржирзНржЯ ржПржХржЯрж╛рж░ ржкрж░ ржПржХржЯрж╛ ржжрзЗржЦрж╛ ржпрж╛ржмрзЗред
          <br />
          ЁЯФ╕ рзи. Relative
          <br />
          * ржПрж▓рж┐ржорзЗржирзНржЯржЯрж┐ ржирж░ржорж╛рж▓ flow-ржП ржерж╛ржХрзЗ, ржХрж┐ржирзНрждрзБ ржЖржорж░рж╛ ржПржХрзЗ рждрж╛рж░ ржирж┐ржЬрзЗрж░ ржЬрж╛рзЯржЧрж╛ ржерзЗржХрзЗ
          рж╕рж░рж╛рждрзЗ ржкрж╛рж░рж┐ `top`, `left` ржЗрждрзНржпрж╛ржжрж┐ ржжрж┐рзЯрзЗред
          <br />
          * ржПрж▓рж┐ржорзЗржирзНржЯрзЗрж░ ржЬрж╛рзЯржЧрж╛ ржкрзЗржЬрзЗ рж╕ржВрж░ржХрзНрж╖рж┐ржд ржерж╛ржХрзЗред
          <br />
          ЁЯЧгя╕П ржЙржжрж╛рж╣рж░ржг: `top: 10px` ржжрж┐рж▓рзЗ ржЙржкрж░рзЗрж░ ржЬрж╛рзЯржЧрж╛ ржерзЗржХрзЗ рззрзжpx ржирж┐ржЪрзЗ ржирзЗржорзЗ ржЖрж╕ржмрзЗред
          <br />
          ЁЯФ╕ рзй. Absolute
          <br />
          * ржПрж▓рж┐ржорзЗржирзНржЯржЯрж┐ normal flow ржерзЗржХрзЗ ржмрж╛ржж ржкрзЬрзЗред
          <br />
          * ржПржЯрж┐ ржирж┐ржХржЯрждржо positioned ancestor ржПрж░ ржЙржкрж░ ржнрж┐рждрзНрждрж┐ ржХрж░рзЗ ржЕржмрж╕рзНржерж╛ржи ржирзЗрзЯред
          <br />
          * ржпржжрж┐ ржирж╛ ржерж╛ржХрзЗ, рждрж╛рж╣рж▓рзЗ document body ржХрзЗ ржзрж░рзЗ ржирзЗрзЯред
          <br />
          * ржЕржирзНржп ржПрж▓рж┐ржорзЗржирзНржЯржЧрзБрж▓рзЛ ржПржХрзЗ ignore ржХрж░рзЗред
          <br />
          ЁЯЧгя╕П ржЙржжрж╛рж╣рж░ржг: ржЯрзБрж▓ржЯрж┐ржк ржмрж╛ dropdown рждрзИрж░рж┐ ржХрж░рждрзЗ ржПржЯрж┐ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж┐ред
          <br />
          ЁЯФ╕ рзк. Fixed
          <br />
          * ржПрж▓рж┐ржорзЗржирзНржЯржЯрж┐ ржнрж┐ржЙржкрзЛрж░рзНржЯ ржЕржирзБржпрж╛рзЯрзА ржЕржмрж╕рзНржерж╛ржи ржирзЗрзЯред
          <br />
          * рж╕рзНржХрзНрж░рж▓ ржХрж░рж▓рзЗржУ ржПрж▓рж┐ржорзЗржирзНржЯржЯрж┐ рж╕рзНржерж┐рж░ ржерж╛ржХрзЗред
          <br />
          ЁЯЧгя╕П ржЙржжрж╛рж╣рж░ржг: ржкрзЗржЬрзЗрж░ ржЙржкрж░рзЗрж░ ржжрж┐ржХрзЗ ржерж╛ржХрж╛ "Back to Top" ржмрж╛ржЯржиред
          <br />
          ЁЯФ╕ рзл. Sticky
          <br />
          * ржПржЯрж┐ relative ржПржмржВ fixed ржПрж░ ржорж┐рж╢рзНрж░ржгред
          <br />
          * ржПржЯрж┐ scroll ржХрж░рж╛рж░ рж╕ржорзЯ relative-ржПрж░ ржорждрзЛ ржерж╛ржХрзЗ, ржХрж┐ржирзНрждрзБ ржирж┐рж░рзНржжрж┐рж╖рзНржЯ ржЬрж╛рзЯржЧрж╛рзЯ
          ржкрзМржБржЫрж╛рж▓рзЗ fixed рж╣рзЯрзЗ ржпрж╛рзЯред
          <br />
          ЁЯЧгя╕П ржЙржжрж╛рж╣рж░ржг: ржПржоржи navbar ржпрж╛ рж╕рзНржХрзНрж░рж▓ ржХрж░рзЗ ржУржкрж░рзЗ ржЧрж┐рзЯрзЗ ржЖржЯржХрзЗ ржерж╛ржХрзЗред
        </div>
      </div>
      <div className="flex flex-wrap justify-start overflow-hidden bg-green-100 text-green-600 shadow-md mb-2">
        <label className="grow px-4 md:text-[18px]" htmlFor="collapse">
          03. What is the CSS <span className="font-bold">box model?</span>
        </label>
        <input
          className="peer p-0 m-0 h-0 w-0 appearance-none rounded border text-slate-800 accent-slate-600 opacity-0"
          type="checkbox"
          name="collapse"
          id="collapse"
        />
        <div className="-transparent w-full absolute -translate-y-full scale-75 scale-y-0 px-4 py-1 opacity-0 transition-all duration-0 peer-checked:relative peer-checked:translate-y-0 peer-checked:scale-100 peer-checked:scale-y-100 peer-checked:bg-green-50 text-lg text-black peer-checked:opacity-100">
          The CSS Box Model is a fundamental concept that defines how elements
          are displayed and spaced in a web page.
          <br />
          Every HTML element is considered as a box, and this box is made up of
          four layers:
          <br />
          ЁЯФ╕ 1. Content тАУ The actual text or image inside the element.
          <br />
          ЁЯФ╕ 2. Padding тАУ The space between the content and the border.
          <br />
          ЁЯФ╕ 3. Border тАУ A line that surrounds the padding and content.
          <br />
          ЁЯФ╕ 4. Margin тАУ The space outside the border, between this element and
          others.
          <br />
          So, when we set the width and height of an element, it only applies to
          the content area, unless we use `box-sizing: border-box` to include
          padding and border in the total size.
          <br />
          ЁЯУМ *Example:* If we set `width: 200px` and add `padding: 20px`, the
          total visible width becomes 240px (unless `box-sizing` is set).
          <br />
          Understanding the box model is important for proper layout, spacing,
          and alignment in CSS.
          <br />
          <br />
          CSS Box Model рж╣рж▓ ржПржХржЯрж┐ ржЧрзБрж░рзБрждрзНржмржкрзВрж░рзНржг ржзрж╛рж░ржгрж╛ ржпрж╛ ржмрж▓рзЗ ржХрж┐ржнрж╛ржмрзЗ ржкрзНрж░рждрж┐ржЯрж┐ HTML
          ржПрж▓рж┐ржорзЗржирзНржЯ ржкрзЗржЬрзЗ ржкрзНрж░ржжрж░рзНрж╢рж┐ржд ржПржмржВ рж╕рзНржкрзЗрж╕рж┐ржВ ржХрж░рж╛ рж╣ржпрж╝ред
          <br />
          ржкрзНрж░рждрзНржпрзЗржХ HTML ржПрж▓рж┐ржорзЗржирзНржЯржХрзЗ ржПржХржЯрж┐ box рж╣рж┐рж╕рзЗржмрзЗ ржзрж░рж╛ рж╣ржпрж╝, ржПржмржВ рж╕рзЗржЗ ржмржХрзНрж╕рзЗ ржерж╛ржХрзЗ
          ржЪрж╛рж░ржЯрж┐ рж╕рзНрждрж░:
          <br />
          ЁЯФ╕ рзз. Content тАУ ржпрзЗржЦрж╛ржирзЗ ржЯрзЗржХрзНрж╕ржЯ ржмрж╛ ржЫржмрж┐ ржерж╛ржХрзЗред
          <br />
          ЁЯФ╕ рзи. Padding тАУ content ржУ border-ржПрж░ ржорж╛ржЭржЦрж╛ржирзЗрж░ ржлрж╛ржБржХрж╛ ржЬрж╛рзЯржЧрж╛ред
          <br />
          ЁЯФ╕ рзй. Border тАУ padding ржПржмржВ content ржШрж┐рж░рзЗ ржерж╛ржХрзЗред
          <br />
          ЁЯФ╕ рзк. Margin тАУ border-ржПрж░ ржмрж╛ржЗрж░рзЗрж░ рж╕рзНржкрзЗрж╕, ржЕржирзНржп ржПрж▓рж┐ржорзЗржирзНржЯ ржерзЗржХрзЗ ржжрзВрж░рждрзНржм рждрзИрж░рж┐
          ржХрж░рзЗред
          <br />
          ржпржЦржи ржЖржорж░рж╛ `width` ржмрж╛ `height` ржжрж┐ржЗ, рж╕рзЗржЯрж╛ рж╢рзБржзрзБржорж╛рждрзНрж░ content-ржПрж░ ржЬржирзНржп ржХрж╛ржЬ
          ржХрж░рзЗ, ржпржжрж┐ ржирж╛ `box-sizing: border-box` ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж┐ред
          <br />
          ЁЯУМ *ржЙржжрж╛рж╣рж░ржг:* ржпржжрж┐ `width: 200px` ржПржмржВ `padding: 20px` ржжрж┐ржЗ, рждрж╛рж╣рж▓рзЗ ржорзЛржЯ
          ржЪржУрзЬрж╛ рж╣ржмрзЗ 240px (ржпржжрж┐ `box-sizing` ржмрзНржпржмрж╣рж╛рж░ ржирж╛ ржХрж░рж┐)ред
          <br />
          рж╕ржарж┐ржХржнрж╛ржмрзЗ layout ржПржмржВ spacing ржмрзБржЭрждрзЗ рж╣рж▓рзЗ CSS Box Model ржЬрж╛ржирж╛ ржЕрждрзНржпржирзНржд
          ржЧрзБрж░рзБрждрзНржмржкрзВрж░рзНржгред
          <br />
        </div>
      </div>
      <div className="flex flex-wrap justify-start overflow-hidden bg-green-100 text-green-600 shadow-md mb-2">
        <label className="grow px-4 md:text-[18px]" htmlFor="collapse4">
          04. What is the <span className="font-bold">Hover effect?</span> What
          is the purpose of the <span className="font-bold">active class?</span>
        </label>
        <input
          className="peer p-0 m-0 h-0 w-0 appearance-none rounded border text-slate-800 accent-slate-600 opacity-0"
          type="checkbox"
          name="collapse4"
          id="collapse4"
        />
        <div className="-transparent w-full absolute -translate-y-full scale-75 scale-y-0 px-4 py-1 opacity-0 transition-all duration-0 peer-checked:relative peer-checked:translate-y-0 peer-checked:scale-100 peer-checked:scale-y-100 peer-checked:bg-green-50 text-lg text-black peer-checked:opacity-100">
          ЁЯФ╕ Hover Effect:
          <br />
          The hover effect is a visual change that happens when the user places
          their mouse pointer over an element, without clicking.
          <br />
          In CSS, we use the `:hover` pseudo-class to define these styles.
          <br />
          It is commonly used for buttons, links, images, etc., to improve user
          interactivity and feedback.
          <br />
          ЁЯУМ Example: A button changing color on hover тАФ <br />
          {`button:hover { background-color: blue; }`}
          <br />
          ЁЯФ╕ Active Class or `:active` State:
          <br />
          The `:active` pseudo-class in CSS applies when an element is being
          clicked or is in a pressed state.
          <br />
          This usually happens between the moment a user presses down on the
          mouse button and releases it.
          <br />
          It is often used to give a pressed effect on buttons or links.
          <br />
          ЁЯУМ Example: A button may shrink or change color when clicked тАФ <br />
          {`button:active { transform: scale(0.98); }`}
          <br />
          The purpose of these is to make the UI more interactive, responsive,
          and user-friendly.
          <br />
          <br />
          ЁЯФ╕ Hover Effect:
          <br />
          Hover effect рж╣рж▓ ржПржоржи ржПржХржЯрж┐ ржнрж┐ржЬрзНржпрзБрзЯрж╛рж▓ ржкрж░рж┐ржмрж░рзНрждржи ржпрж╛ ржШржЯрзЗ ржпржЦржи ржЗржЙржЬрж╛рж░ ржорж╛ржЙрж╕
          ржХрж╛рж░рзНрж╕рж░ ржХрзЛржирзЛ ржПрж▓рж┐ржорзЗржирзНржЯрзЗрж░ ржЙржкрж░ ржирж┐рзЯрзЗ ржпрж╛рзЯ, ржХрж┐ржирзНрждрзБ ржХрзНрж▓рж┐ржХ ржХрж░рзЗ ржирж╛ред
          <br />
          CSS-ржП ржЖржорж░рж╛ `:hover` pseudo-class ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж┐ ржПржЗ effect рждрзИрж░рж┐ ржХрж░рждрзЗред
          <br />
          рж╕рж╛ржзрж╛рж░ржгржд button, link, image ржЗрждрзНржпрж╛ржжрж┐рж░ ржЬржирзНржп ржмрзНржпржмрж╣рж╛рж░ рж╣рзЯ ржпрж╛рждрзЗ ржЗржЙржЬрж╛рж░
          ржЗржирзНржЯрж╛рж░ржЕрзНржпрж╛ржХрж╢ржи ржмрж╛рзЬрзЗред
          <br />
          ЁЯУМ ржЙржжрж╛рж╣рж░ржг: ржПржХржЯрж┐ ржмрж╛ржЯржирзЗ ржорж╛ржЙрж╕ ржирж┐рж▓рзЗржЗ рж░ржЩ ржкрж░рж┐ржмрж░рзНрждржи рж╣рзЯ тАФ <br />
          {`button:hover { background-color: blue; }`}
          <br />
          ЁЯФ╕ Active Class ржмрж╛ `:active` State:
          <br />
          CSS-ржП `:active` pseudo-class рждржЦржи ржХрж╛ржЬ ржХрж░рзЗ ржпржЦржи ржХрзЛржирзЛ ржПрж▓рж┐ржорзЗржирзНржЯ ржХрзНрж▓рж┐ржХ ржХрж░рж╛
          рж╣ржЪрзНржЫрзЗ ржмрж╛ ржЪрзЗржкрзЗ ржзрж░рж╛ рж╣ржЪрзНржЫрзЗред
          <br />
          ржЕрж░рзНржерж╛рзО, ржпржЦржи ржЗржЙржЬрж╛рж░ ржорж╛ржЙрж╕ ржкрзНрж░рзЗрж╕ ржХрж░рзЗ рж░рзЗржЦрзЗржЫрзЗ, ржХрж┐ржирзНрждрзБ ржЫрзЗрзЬрзЗ ржжрзЗрзЯржирж┐ рждржЦржи ржПржЗ
          рж╕рзНржЯрзЗржЯ ржжрзЗржЦрж╛ ржпрж╛рзЯред
          <br />
          ржПржЯрж┐ ржмрж╛ржЯржирзЗрж░ ржХрзНрж▓рж┐ржХ ржмрж╛ ржЪрж╛ржк ржкрзЬрж╛ ржЕржмрж╕рзНржерж╛рж░ ржЬржирзНржп ржмрзНржпржмрж╣рж╛рж░ рж╣рзЯред
          <br />
          ЁЯУМ ржЙржжрж╛рж╣рж░ржг: ржмрж╛ржЯржирзЗ ржХрзНрж▓рж┐ржХ ржХрж░рж▓рзЗ ржПржХржЯрзБ ржЫрзЛржЯ рж╣рзЯрзЗ ржпрж╛ржУрзЯрж╛ тАФ <br />
          {`button:active { transform: scale(0.98); }`}
          <br />
          ржПржЗ ржжрзБржЗржЯрж┐ рж╕рзНржЯрж╛ржЗрж▓ ржЗржЙржЬрж╛рж░ ржЗржирзНржЯрж╛рж░ржлрзЗрж╕ржХрзЗ ржЖрж░ржУ ржЗржирзНржЯрж╛рж░рзЗржХрзНржЯрж┐ржн ржПржмржВ ржЗржЙржЬрж╛рж░ ржлрзНрж░рзЗржирзНржбрж▓рж┐
          ржХрж░рзЗ рждрзЛрж▓рзЗред
        </div>
      </div>
      <div className="flex flex-wrap justify-start overflow-hidden bg-green-100 text-green-600 shadow-md mb-2">
        <label className="grow px-4 md:text-[18px]" htmlFor="collapse5">
          05. What is a CSS <span className="font-bold">preprocessor</span>?
          What are some
          <span className="font-bold"> benefits of Sass</span>?
        </label>
        <input
          className="peer p-0 m-0 h-0 w-0 appearance-none rounded border text-slate-800 accent-slate-600 opacity-0"
          type="checkbox"
          name="collapse5"
          id="collapse5"
        />
        <div className="-transparent w-full absolute -translate-y-full scale-75 scale-y-0 px-4 py-1 opacity-0 transition-all duration-0 peer-checked:relative peer-checked:translate-y-0 peer-checked:scale-100 peer-checked:scale-y-100 peer-checked:bg-green-50 text-lg text-black peer-checked:opacity-100">
          ЁЯФ╕ What is a CSS Preprocessor?
          <br />
          A CSS Preprocessor is a tool that extends the functionality of regular
          CSS.
          <br />
          It allows developers to write CSS in a more structured, reusable, and
          dynamic way.
          <br />
          It uses features like variables, functions, nesting, mixins, etc.
          <br />
          Popular preprocessors include Sass, LESS, and Stylus.
          <br />
          These are written in their own syntax and then compiled into standard
          CSS before being used in a browser.
          <br />
          ЁЯФ╕ What are some benefits of Sass? <br />
          тЬЕ 1. Variables тАУ You can define values like colors, fonts, sizes once
          and reuse them.
          <br />
          тЮбя╕П Example: `$primary-color: #007bff;`
          <br />
          тЬЕ 2. Nesting тАУ You can write cleaner and more readable code by
          nesting selectors.
          <br />
          тЮбя╕П Example:
          <pre>
            {`
nav {  
  ul {  
    li {  
      a { color: $primary-color; }  
    }  
  }  
}  
  `}
          </pre>
          тЬЕ 3. Mixins тАУ Reusable blocks of CSS code that accept arguments.
          <br />
          тЮбя╕П Example:
          <pre>
            {`
@mixin flexCenter {  
  display: flex;  
  justify-content: center;  
  align-items: center;  
}  
`}
          </pre>
          тЬЕ 4. Functions & Operations тАУ You can do calculations and logic
          inside CSS.
          <br />
          тЮбя╕П Example: `width: 100% / 3;`
          <br />
          тЬЕ 5. Modularization тАУ You can split CSS into multiple partial files
          and import them.
          <br />
          тЮбя╕П Example: `@import 'header';`
          <br />
          In summary, Sass makes writing CSS more efficient, maintainable, and
          scalable for large projects.
          <br />
          <br />
          ржПржХржЯрж┐ CSS Preprocessor рж╣рж▓ ржПржоржи ржПржХржЯрж┐ ржЯрзБрж▓ ржпрж╛ CSS-ржХрзЗ ржЖрж░ржУ рж╢ржХрзНрждрж┐рж╢рж╛рж▓рзА ржУ
          ржмрзНржпржмрж╣рж╛рж░ржпрзЛржЧрзНржп ржХрж░рзЗ рждрзЛрж▓рзЗред
          <br />
          ржПржЯрж┐ ржбрзЗржнрзЗрж▓ржкрж╛рж░ржжрзЗрж░ CSS ржХрзЗ organized, reusable ржПржмржВ dynamic ржнрж╛ржмрзЗ рж▓рзЗржЦрж╛рж░
          рж╕рзБржпрзЛржЧ ржжрзЗрзЯред
          <br />
          ржПржЦрж╛ржирзЗ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛ ржпрж╛рзЯ variable, function, nesting, mixin ржЗрждрзНржпрж╛ржжрж┐ред
          <br />
          рж╕ржмржЪрзЗрзЯрзЗ ржЬржиржкрзНрж░рж┐рзЯ ржкрзНрж░рж┐ржкрзНрж░рж╕рзЗрж╕рж░ржЧрзБрж▓рзЛрж░ ржоржзрзНржпрзЗ рж░рзЯрзЗржЫрзЗ Sass, LESS, ржПржмржВ Stylusред
          <br />
          ржПржЗ ржХрзЛржбржЧрзБрж▓рзЛ ржкрзНрж░ржержорзЗ ржкрзНрж░рж┐ржкрзНрж░рж╕рзЗрж╕рж░ рж╕рж┐ржиржЯрзНржпрж╛ржХрзНрж╕рзЗ рж▓рзЗржЦрж╛ рж╣рзЯ, рждрж╛рж░ржкрж░ CSS-ржП compile
          рж╣рзЯрзЗ ржмрзНрж░рж╛ржЙржЬрж╛рж░рзЗ ржмрзНржпржмрж╣рзГржд рж╣рзЯред
          <br />
          ЁЯФ╕ Sass ржПрж░ ржХрж┐ржЫрзБ рж╕рзБржмрж┐ржзрж╛:
          <br />
          тЬЕ рзз. Variables тАУ ржЖржкржирж┐ ржПржХржмрж╛рж░ color, font ржмрж╛ size define ржХрж░рзЗ рж╕рзЗржЯрж╛
          ржмрж╛рж░ржмрж╛рж░ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рждрзЗ ржкрж╛рж░рзЗржиред
          <br />
          тЮбя╕П ржЙржжрж╛рж╣рж░ржг: `$primary-color: #007bff;`
          <br />
          тЬЕ рзи. Nesting тАУ CSS ржХрзЛржб ржЖрж░ржУ ржкрж░рж┐рж╖рзНржХрж╛рж░ ржПржмржВ readable рж╣рзЯ nested ржнрж╛ржмрзЗ рж▓рзЗржЦрж╛рж░
          ржорж╛ржзрзНржпржорзЗред
          <br />
          тЮбя╕П ржЙржжрж╛рж╣рж░ржг:
          <pre>
            {`
nav {  
  ul {  
    li {  
      a { color: $primary-color; }  
    }  
  }  
}  
  `}
          </pre>
          тЬЕ рзй. Mixins тАУ ржмрж╛рж░ржмрж╛рж░ ржмрзНржпржмрж╣рж╛рж░рзЗрж░ ржЬржирзНржп reusable CSS block рждрзИрж░рж┐ ржХрж░рж╛ ржпрж╛рзЯред
          <br />
          тЮбя╕П ржЙржжрж╛рж╣рж░ржг:
          <pre>
            {`
@mixin flexCenter {  
  display: flex;  
  justify-content: center;  
  align-items: center;  
}  
`}
          </pre>
          тЬЕ рзк. Functions & Operations тАУ CSS-ржП ржЧрж╛ржгрж┐рждрж┐ржХ рж╣рж┐рж╕рж╛ржм ржПржмржВ рж▓ржЬрж┐ржХ ржкрзНрж░рзЯрзЛржЧ ржХрж░рж╛
          ржпрж╛рзЯред
          <br />
          тЮбя╕П ржЙржжрж╛рж╣рж░ржг: `width: 100% / 3;`
          <br />
          тЬЕ рзл. Modularization тАУ ржХрзЛржбржХрзЗ ржЫрзЛржЯ ржЫрзЛржЯ ржлрж╛ржЗрж▓рзЗ ржнрж╛ржЧ ржХрж░рзЗ import ржХрж░рж╛ ржпрж╛рзЯред
          <br />
          тЮбя╕П ржЙржжрж╛рж╣рж░ржг: `@import 'header';`
          <br />
          рж╕рж╛рж░рж╕ржВржХрзНрж╖рзЗржкрзЗ, Sass CSS рж▓рзЗржЦрж╛ржХрзЗ рж╕рж╣ржЬ, maintainable, ржПржмржВ ржмрзЬ ржкрзНрж░ржЬрзЗржХрзНржЯрзЗ ржХрж╛ржЬ
          ржХрж░рж╛рж░ ржЬржирзНржп ржЙржкржпрзБржХрзНржд ржХрж░рзЗ рждрзЛрж▓рзЗред
        </div>
      </div>
      <div className="flex flex-wrap justify-start overflow-hidden bg-green-100 text-green-600 shadow-md mb-2">
        <label className="grow px-4 md:text-[18px]" htmlFor="collapse6">
          06. What are the different types of{" "}
          <span className="font-bold">Selectors</span> in CSS?
        </label>
        <input
          className="peer p-0 m-0 h-0 w-0 appearance-none rounded border text-slate-800 accent-slate-600 opacity-0"
          type="checkbox"
          name="collapse6"
          id="collapse6"
        />
        <div className="-transparent w-full absolute -translate-y-full scale-75 scale-y-0 px-4 py-1 opacity-0 transition-all duration-0 peer-checked:relative peer-checked:translate-y-0 peer-checked:scale-100 peer-checked:scale-y-100 peer-checked:bg-green-50 text-lg text-black peer-checked:opacity-100">
          CSS selectors are used to select and style specific HTML elements.
          <br />
          There are several types of selectors in CSS:
          <br />
          ЁЯФ╕ 1. Universal Selector (`*`) тАУ Selects all elements on the page.
          <br />
          тЮбя╕П Example: <br /> {`* { margin: 0; padding: 0; }`}
          <br />
          ЁЯФ╕ 2. Type Selector тАУ Selects elements by tag name.
          <br />
          тЮбя╕П Example: <br /> {`p { color: blue; }`}
          <br />
          ЁЯФ╕ 3. Class Selector (`.`) тАУ Selects elements with a specific class.
          <br />
          тЮбя╕П Example: <br /> {`.btn { background-color: green; }`}
          <br />
          ЁЯФ╕ 4. ID Selector (`#`) тАУ Selects a single element with a specific ID.
          <br />
          тЮбя╕П Example: <br /> {`#header { font-size: 24px; }`}
          <br />
          ЁЯФ╕ 5. Grouping Selector тАУ Applies the same style to multiple
          selectors.
          <br />
          тЮбя╕П Example: <br /> {`h1, h2, h3 { font-weight: bold; }`}
          <br />
          ЁЯФ╕ 6. Descendant Selector тАУ Selects elements inside another element.
          <br />
          тЮбя╕П Example: <br /> {`div p { color: red; }`}
          <br />
          ЁЯФ╕ 7. Child Selector ({`>`}) тАУ Selects direct children only.
          <br />
          тЮбя╕П Example: <br /> {`ul > li { list-style: none; }`}
          <br />
          ЁЯФ╕ 8. Adjacent Sibling Selector (`+`) тАУ Selects the next sibling
          element.
          <br />
          тЮбя╕П Example: <br /> {`h1 + p { color: gray; }`}
          <br />
          ЁЯФ╕ 9. General Sibling Selector (`~`) тАУ Selects all following siblings.
          <br />
          тЮбя╕П Example: <br /> {`h1 ~ p { font-size: 14px; }`}
          <br />
          ЁЯФ╕ 10. Attribute Selector тАУ Selects elements based on attributes.
          <br />
          тЮбя╕П Example: <br /> {`input[type="text"] { border: 1px solid #000; }`}
          <br />
          ЁЯФ╕ 11. Pseudo-class Selector тАУ Selects elements based on user
          interaction or position.
          <br />
          тЮбя╕П Example: <br />{" "}
          {(`a:hover { color: red; }`, `li:first-child { font-weight: bold; }`)}
          <br />
          ЁЯФ╕ 12. Pseudo-element Selector тАУ Selects part of an element.
          <br />
          тЮбя╕П Example: <br /> {`p::first-line { font-style: italic; }`}
          <br />
          These selectors help developers target specific elements and apply
          styles efficiently.
          <br />
          <br />
          CSS selector ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛ рж╣ржпрж╝ ржирж┐рж░рзНржжрж┐рж╖рзНржЯ HTML ржПрж▓рж┐ржорзЗржирзНржЯржЧрзБрж▓рзЛржХрзЗ style ржХрж░рж╛рж░
          ржЬржирзНржпред
          <br />
          CSS-ржП ржмрзЗрж╢ ржХржпрж╝рзЗржХ ржзрж░ржирзЗрж░ selector рж░ржпрж╝рзЗржЫрзЗ:
          <br />
          ЁЯФ╕ рзз. Universal Selector (`*`) тАУ рж╕ржм ржПрж▓рж┐ржорзЗржирзНржЯржХрзЗ select ржХрж░рзЗред
          <br />
          тЮбя╕П ржЙржжрж╛рж╣рж░ржг: <br /> {`* { margin: 0; padding: 0; }`}
          <br />
          ЁЯФ╕ рзи. Type Selector тАУ ржЯрзНржпрж╛ржЧ ржирж╛ржо ржжрж┐рзЯрзЗ select ржХрж░рзЗред
          <br />
          тЮбя╕П ржЙржжрж╛рж╣рж░ржг: <br /> {`p { color: blue; }`}
          <br />
          ЁЯФ╕ рзй. Class Selector (`.`) тАУ ржирж┐рж░рзНржжрж┐рж╖рзНржЯ class ржПрж░ ржПрж▓рж┐ржорзЗржирзНржЯржЧрзБрж▓рзЛржХрзЗ select
          ржХрж░рзЗред
          <br />
          тЮбя╕П ржЙржжрж╛рж╣рж░ржг: <br /> {`.btn { background-color: green; }`}
          <br />
          ЁЯФ╕ рзк. ID Selector (`#`) тАУ ржирж┐рж░рзНржжрж┐рж╖рзНржЯ ID ржПрж░ ржПржХржХ ржПрж▓рж┐ржорзЗржирзНржЯ select ржХрж░рзЗред
          <br />
          тЮбя╕П ржЙржжрж╛рж╣рж░ржг: <br /> {`#header { font-size: 24px; }`}
          <br />
          ЁЯФ╕ рзл. Grouping Selector тАУ ржПржХрж╕рж╛ржерзЗ ржПржХрж╛ржзрж┐ржХ selector ржПрж░ ржЬржирзНржп style ржжрзЗрзЯред
          <br />
          тЮбя╕П ржЙржжрж╛рж╣рж░ржг: <br /> {`h1, h2, h3 { font-weight: bold; }`}
          <br />
          ЁЯФ╕ рзм. Descendant Selector тАУ ржПржХржЯрж┐ ржПрж▓рж┐ржорзЗржирзНржЯрзЗрж░ ржнрзЗрждрж░рзЗрж░ ржЕржирзНржп ржПрж▓рж┐ржорзЗржирзНржЯ
          select ржХрж░рзЗред
          <br />
          тЮбя╕П ржЙржжрж╛рж╣рж░ржг: <br /> {`div p { color: red; }`}
          <br />
          ЁЯФ╕ рзн. Child Selector ({`>`}) тАУ рж╢рзБржзрзБржорж╛рждрзНрж░ рж╕рж░рж╛рж╕рж░рж┐ child ржПрж▓рж┐ржорзЗржирзНржЯ select
          ржХрж░рзЗред
          <br />
          тЮбя╕П ржЙржжрж╛рж╣рж░ржг: <br /> {`ul > li { list-style: none; }`}
          <br />
          ЁЯФ╕ рзо. Adjacent Sibling Selector (`+`) тАУ ржХрзЛржирзЛ ржПрж▓рж┐ржорзЗржирзНржЯрзЗрж░ ржкрж░рзЗрж░ sibling
          select ржХрж░рзЗред
          <br />
          тЮбя╕П ржЙржжрж╛рж╣рж░ржг: <br /> {`h1 + p { color: gray; }`}
          <br />
          ЁЯФ╕ рзп. General Sibling Selector (`~`) тАУ ржкрж░ржмрж░рзНрждрзА рж╕ржм sibling select ржХрж░рзЗред
          <br />
          тЮбя╕П ржЙржжрж╛рж╣рж░ржг: <br /> {`h1 ~ p { font-size: 14px; }`}
          <br />
          ЁЯФ╕ рззрзж. Attribute Selector тАУ ржирж┐рж░рзНржжрж┐рж╖рзНржЯ attribute ржЕржирзБржпрж╛рзЯрзА ржПрж▓рж┐ржорзЗржирзНржЯ
          select ржХрж░рзЗред
          <br />
          тЮбя╕П ржЙржжрж╛рж╣рж░ржг: <br /> {`input[type="text"] { border: 1px solid #000; }`}
          <br />
          ЁЯФ╕ рззрзз. Pseudo-class Selector тАУ ржЗржЙржЬрж╛рж░ ржЗржирзНржЯрж╛рж░ржЕрзНржпрж╛ржХрж╢ржи ржмрж╛ ржЕржмрж╕рзНржерж╛ржи ржЕржирзБржпрж╛рзЯрзА
          select ржХрж░рзЗред
          <br />
          тЮбя╕П ржЙржжрж╛рж╣рж░ржг: <br />{" "}
          {(`a:hover { color: red; }`, `li:first-child { font-weight: bold; }`)}
          <br />
          ЁЯФ╕ рззрзи. Pseudo-element Selector тАУ ржПржХржЯрж┐ ржПрж▓рж┐ржорзЗржирзНржЯрзЗрж░ ржирж┐рж░рзНржжрж┐рж╖рзНржЯ ржЕржВрж╢ select
          ржХрж░рзЗред
          <br />
          тЮбя╕П ржЙржжрж╛рж╣рж░ржг: <br /> {`p::first-line { font-style: italic; }`}
          <br />
          ржПрж╕ржм selector ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ ржЖржорж░рж╛ ржирж┐рж░рзНржжрж┐рж╖рзНржЯржнрж╛ржмрзЗ ржПрж▓рж┐ржорзЗржирзНржЯ ржЯрж╛рж░рзНржЧрзЗржЯ ржХрж░рзЗ CSS
          ржЕрзНржпрж╛ржкрзНрж▓рж╛ржЗ ржХрж░рждрзЗ ржкрж╛рж░рж┐ред
        </div>
      </div>
      <div className="flex flex-wrap justify-start overflow-hidden bg-green-100 text-green-600 shadow-md mb-2">
        <label className="grow px-4 md:text-[18px]" htmlFor="collapse7">
          07. What is CSS <span className="font-bold">specificity?</span>
        </label>
        <input
          className="peer p-0 m-0 h-0 w-0 appearance-none rounded border text-slate-800 accent-slate-600 opacity-0"
          type="checkbox"
          name="collapse7"
          id="collapse7"
        />
        <div className="-transparent w-full absolute -translate-y-full scale-75 scale-y-0 px-4 py-1 opacity-0 transition-all duration-0 peer-checked:relative peer-checked:translate-y-0 peer-checked:scale-100 peer-checked:scale-y-100 peer-checked:bg-green-50 text-lg text-black peer-checked:opacity-100">
          CSS specificity is a system that determines which CSS rule takes
          priority when multiple rules target the same element.
          <br />
          The browser uses specificity to decide which style to apply when there
          is a conflict.
          <br />
          Specificity is calculated based on the type of selector used:
          <br />
          ЁЯФ╕ Inline styles (e.g., `style="color: red;"`) have the highest
          specificity тАФ score: 1000.
          <br />
          ЁЯФ╕ ID selectors (e.g., `#header`) have high specificity тАФ score: 100.
          <br />
          ЁЯФ╕ Class, attribute, and pseudo-class selectors (e.g., `.btn`,
          `[type="text"]`, `:hover`) тАФ score: 10.
          <br />
          ЁЯФ╕ Element and pseudo-element selectors (e.g., `h1`, `p::first-line`)
          тАФ score: 1.
          <br />
          ЁЯФ╕ The universal selector (`*`), combinators (`+`, {`>`}, `~`), and
          inherited styles have no specificity.
          <br />
          ЁЯУМ Example: <br /> `#idSelector` will override `.classSelector`, even
          if `.classSelector` appears later in the CSS file.
          <br />
          If two selectors have the same specificity, then the one declared last
          in the CSS will win.
          <br />
          Understanding specificity is crucial for writing predictable and
          conflict-free CSS.
          <br />
          <br />
          CSS specificity ржПржоржи ржПржХржЯрж┐ ржирж┐ржпрж╝ржо ржпрж╛ ржмрж▓рзЗ ржжрзЗрзЯ, ржПржХржЗ ржПрж▓рж┐ржорзЗржирзНржЯрзЗ ржПржХрж╛ржзрж┐ржХ CSS
          рж░рзБрж▓ рж▓рж╛ржЧрж▓рзЗ ржХрзЛржиржЯрж╛ ржХрж╛рж░рзНржпржХрж░ рж╣ржмрзЗред
          <br />
          ржпржЦржи ржПржХрж╛ржзрж┐ржХ рж░рзБрж▓ ржПржХ ржПрж▓рж┐ржорзЗржирзНржЯрзЗ apply рж╣рзЯ, рждржЦржи ржмрзНрж░рж╛ржЙржЬрж╛рж░ specificity ржмрзНржпржмрж╣рж╛рж░
          ржХрж░рзЗ рж╕рж┐ржжрзНржзрж╛ржирзНржд ржирзЗрзЯ ржХрзЛржиржЯрж╛ ржкрзНрж░рж╛ржзрж╛ржирзНржп ржкрж╛ржмрзЗред
          <br />
          Specificity ржирж┐рж░рзНржнрж░ ржХрж░рзЗ ржХрзЛржи ржзрж░ржирзЗрж░ selector ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ рждрж╛рж░ ржЙржкрж░:
          <br />
          ЁЯФ╕ Inline style (ржпрзЗржоржи `style="color: red;"`) тАУ рж╕ржмржЪрзЗрзЯрзЗ ржмрзЗрж╢рж┐ specificity
          тАФ рж╕рзНржХрзЛрж░: 1000ред
          <br />
          ЁЯФ╕ ID selector (ржпрзЗржоржи `#header`) тАУ ржЙржЪрзНржЪ specificity тАФ рж╕рзНржХрзЛрж░: 100ред
          <br />
          ЁЯФ╕ Class, attribute ржПржмржВ pseudo-class (ржпрзЗржоржи `.btn`, `[type="text"]`,
          `:hover`) тАФ рж╕рзНржХрзЛрж░: 10ред
          <br />
          ЁЯФ╕ Element ржПржмржВ pseudo-element (ржпрзЗржоржи `h1`, `p::first-line`) тАФ рж╕рзНржХрзЛрж░: 1ред
          <br />
          ЁЯФ╕ `*` universal selector ржмрж╛ `+`, {`>`}, `~` ржПрж░ ржХрзЛржиржУ specificity ржирзЗржЗред
          <br />
          ЁЯУМ ржЙржжрж╛рж╣рж░ржг: <br /> `#idSelector` рж╕ржмрж╕ржорзЯ `.classSelector` ржХрзЗ override
          ржХрж░ржмрзЗ, ржпржжрж┐ржУ `.classSelector` ржирж┐ржЪрзЗ рж▓рзЗржЦрж╛ ржерж╛ржХрзЗред
          <br />
          ржпржжрж┐ ржжрзБржЗржЯрж╛ selector-ржПрж░ specificity ржПржХржЗ рж╣рзЯ, рждрж╛рж╣рж▓рзЗ ржкрж░рзЗ рж▓рзЗржЦрж╛ рж░рзБрж▓ ржХрж╛рж░рзНржпржХрж░
          рж╣рзЯред
          <br />
          CSS specificity ржмрзЛржЭрж╛ ржЦрзБржм ржЧрзБрж░рзБрждрзНржмржкрзВрж░рзНржг, ржпрж╛рждрзЗ ржХржиржлрзНрж▓рж┐ржХрзНржЯ ржЫрж╛рзЬрж╛ ржкрж░рж┐рж╖рзНржХрж╛рж░
          ржПржмржВ ржирж┐рзЯржирзНрждрзНрж░рж┐ржд рж╕рзНржЯрж╛ржЗрж▓ рж▓рзЗржЦрж╛ ржпрж╛рзЯред
        </div>
      </div>
      <div className="flex flex-wrap justify-start overflow-hidden bg-green-100 text-green-600 shadow-md mb-2">
        <label className="grow px-4 md:text-[18px]" htmlFor="collapse8">
          08. What is the difference between{" "}
          <span className="font-bold">pseudo element and pseudo class?</span>
        </label>
        <input
          className="peer p-0 m-0 h-0 w-0 appearance-none rounded border text-slate-800 accent-slate-600 opacity-0"
          type="checkbox"
          name="collapse8"
          id="collapse8"
        />
        <div className="-transparent w-full absolute -translate-y-full scale-75 scale-y-0 px-4 py-1 opacity-0 transition-all duration-0 peer-checked:relative peer-checked:translate-y-0 peer-checked:scale-100 peer-checked:scale-y-100 peer-checked:bg-green-50 text-lg text-black peer-checked:opacity-100">
          A pseudo-class is used to define the special state of an element.
          <br />
          For example, when a user hovers or visits a link.
          <br />
          It uses one colon (`:`) syntax.
          <br />
          Example: `:hover`, `:focus`, `:nth-child(2)`
          <br />
          A pseudo-element is used to style specific parts of an element.
          <br />
          For example, the first letter or first line of a paragraph.
          <br />
          It uses two colons (`::`) syntax.
          <br />
          Example: `::before`, `::after`, `::first-letter`, `::first-line`
          <br />
          ЁЯУМ Main Difference:
          <br />
          Pseudo-class targets the state of the element (like hover, focus),
          <br />
          while pseudo-element targets the part of the content inside the
          element.
          <br />
          <br />
          pseudo-class ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛ рж╣ржпрж╝ ржПржХржЯрж┐ ржПрж▓рж┐ржорзЗржирзНржЯрзЗрж░ ржмрж┐рж╢рзЗрж╖ ржЕржмрж╕рзНржерж╛ ржмрзЛржЭрж╛рждрзЗред
          <br />
          ржпрзЗржоржи, рж▓рж┐ржВржХрзЗ рж╣рзЛржнрж╛рж░ ржХрж░рж▓рзЗ ржмрж╛ ржлрзЛржХрж╛рж╕ ржХрж░рж▓рзЗред
          <br />
          ржПржЯрж┐ ржПржХржЯрж┐ ржХрзЛрж▓ржи (`:`) ржжрж┐рзЯрзЗ рж▓рзЗржЦрж╛ рж╣ржпрж╝ред
          <br />
          ржЙржжрж╛рж╣рж░ржг: `:hover`, `:focus`, `:nth-child(2)`
          <br />
          pseudo-element ржмрзНржпржмрж╣рж╛рж░ рж╣ржпрж╝ ржПржХржЯрж┐ ржПрж▓рж┐ржорзЗржирзНржЯрзЗрж░ ржнрж┐рждрж░рзЗрж░ ржирж┐рж░рзНржжрж┐рж╖рзНржЯ ржЕржВрж╢ рж╕рзНржЯрж╛ржЗрж▓
          ржХрж░рждрзЗред
          <br />
          ржпрзЗржоржи, ржПржХржЯрж┐ ржЕржирзБржЪрзНржЫрзЗржжрзЗрж░ ржкрзНрж░ржержо ржЕржХрзНрж╖рж░ ржмрж╛ ржкрзНрж░ржержо рж▓рж╛ржЗржиред
          <br />
          ржПржЯрж┐ ржжрзБржЯрж┐ ржХрзЛрж▓ржи (`::`) ржжрж┐рзЯрзЗ рж▓рзЗржЦрж╛ рж╣ржпрж╝ред
          <br />
          ржЙржжрж╛рж╣рж░ржг: `::before`, `::after`, `::first-letter`, `::first-line`
          <br />
          ЁЯУМ ржорзВрж▓ ржкрж╛рж░рзНржержХрзНржп:
          <br />
          pseudo-class ржПрж▓рж┐ржорзЗржирзНржЯрзЗрж░ ржЕржмрж╕рзНржерж╛ ржирж┐рж░рзНржжрзЗрж╢ ржХрж░рзЗ,
          <br />
          ржЖрж░ pseudo-element ржПрж▓рж┐ржорзЗржирзНржЯрзЗрж░ ржнрж┐рждрж░рзЗрж░ ржирж┐рж░рзНржжрж┐рж╖рзНржЯ ржЕржВрж╢ ржирж┐рж░рзНржжрзЗрж╢ ржХрж░рзЗред
        </div>
      </div>
      <div className="flex flex-wrap justify-start overflow-hidden bg-green-100 text-green-600 shadow-md mb-2">
        <label className="grow px-4 md:text-[18px]" htmlFor="collapse9">
          09. How will you use <span className="font-bold">media queries</span>{" "}
          to make a website responsive?
        </label>
        <input
          className="peer p-0 m-0 h-0 w-0 appearance-none rounded border text-slate-800 accent-slate-600 opacity-0"
          type="checkbox"
          name="collapse9"
          id="collapse9"
        />
        <div className="-transparent w-full absolute -translate-y-full scale-75 scale-y-0 px-4 py-1 opacity-0 transition-all duration-0 peer-checked:relative peer-checked:translate-y-0 peer-checked:scale-100 peer-checked:scale-y-100 peer-checked:bg-green-50 text-lg text-black peer-checked:opacity-100">
          To make a website responsive, I use CSS media queries.
          <br />
          Media queries allow me to apply different styles based on device
          screen size, resolution, or orientation.
          <br />
          For example, I can target screens smaller than 768px to design for
          mobile devices.
          <br />
          The basic syntax is:
          <pre>{`
@media (max-width: 768px) {
  body {
    background-color: lightgray;
  }
}
`}</pre>
          This means when the screen width is 768px or less, the background will
          change.
          <br />
          I usually define breakpoints for mobile, tablet, and desktop views
          like:
          <br />
          ЁЯФ╕ Mobile: `max-width: 767px`
          <br />
          ЁЯФ╕ Tablet: `min-width: 768px` and `max-width: 1023px`
          <br />
          ЁЯФ╕ Desktop: `min-width: 1024px`
          <br />
          Using media queries ensures the website layout and design look good on
          all devices.
          <br />
          This improves user experience and accessibility across platforms.
          <br />
          <br />
          ржПржХржЯрж┐ ржУржпрж╝рзЗржмрж╕рж╛ржЗржЯржХрзЗ responsive ржХрж░рж╛рж░ ржЬржирзНржп ржЖржорж┐ CSS media queries ржмрзНржпржмрж╣рж╛рж░
          ржХрж░рж┐ред
          <br />
          Media queries ржПрж░ ржорж╛ржзрзНржпржорзЗ ржЖржорж┐ ржнрж┐ржирзНржи ржнрж┐ржирзНржи рж╕рзНржХрзНрж░рж┐ржи рж╕рж╛ржЗржЬ, рж░рзЗржЬрзЛрж▓рж┐ржЙрж╢ржи ржмрж╛
          ржбрж┐ржнрж╛ржЗрж╕ ржЕрж░рж┐ржпрж╝рзЗржирзНржЯрзЗрж╢ржи ржЕржирзБржпрж╛ржпрж╝рзА рж╕рзНржЯрж╛ржЗрж▓ ржкрзНрж░ржпрж╝рзЛржЧ ржХрж░рждрзЗ ржкрж╛рж░рж┐ред
          <br />
          ржпрзЗржоржи, ржЖржорж┐ 768px ржПрж░ ржирж┐ржЪрзЗрж░ рж╕рзНржХрзНрж░рж┐ржи ржЯрж╛рж░рзНржЧрзЗржЯ ржХрж░рзЗ ржорзЛржмрж╛ржЗрж▓рзЗрж░ ржЬржирзНржп ржЖрж▓рж╛ржжрж╛
          ржбрж┐ржЬрж╛ржЗржи ржХрж░рж┐ред
          <br />
          ржорзВрж▓ syntax рж╣ржЪрзНржЫрзЗ:
          <pre>{`
@media (max-width: 768px) {
  body {
    background-color: lightgray;
  }
}
`}</pre>
          ржорж╛ржирзЗ рж╕рзНржХрзНрж░рж┐ржи рж╕рж╛ржЗржЬ 768px ржмрж╛ ржХржо рж╣рж▓рзЗ ржмрзНржпрж╛ржХржЧрзНрж░рж╛ржЙржирзНржб ржХрж╛рж▓рж╛рж░ ржкрж░рж┐ржмрж░рзНрждржи рж╣ржмрзЗред
          <br />
          ржЖржорж┐ рж╕рж╛ржзрж╛рж░ржгржд рждрж┐ржиржЯрж╛ breakpoint ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж┐:
          <br />
          ЁЯФ╕ ржорзЛржмрж╛ржЗрж▓: `max-width: 767px`
          <br />
          ЁЯФ╕ ржЯрзНржпрж╛ржмрж▓рзЗржЯ: `min-width: 768px` ржПржмржВ `max-width: 1023px`
          <br />
          ЁЯФ╕ ржбрзЗрж╕рзНржХржЯржк: `min-width: 1024px`
          <br />
          Media queries ржмрзНржпржмрж╣рж╛рж░рзЗ ржУржпрж╝рзЗржмрж╕рж╛ржЗржЯ рж╕ржм ржбрж┐ржнрж╛ржЗрж╕рзЗ рж╕рзБржирзНржжрж░ ржУ рж╕ржарж┐ржХржнрж╛ржмрзЗ
          ржкрзНрж░ржжрж░рзНрж╢рж┐ржд рж╣ржпрж╝ред
          <br />
          ржПрждрзЗ ржХрж░рзЗ ржЗржЙржЬрж╛рж░рзЗрж░ ржЕржнрж┐ржЬрзНржЮрждрж╛ ржПржмржВ accessibility ржжрзБржЗржЗ ржЙржирзНржиржд рж╣ржпрж╝ред
        </div>
      </div>
      <div className="flex flex-wrap justify-start overflow-hidden bg-green-100 text-green-600 shadow-md mb-2">
        <label className="grow px-4 md:text-[18px]" htmlFor="collapse10">
          10. How will you make{" "}
          <span className="font-bold">font size responsive</span>?
        </label>
        <input
          className="peer p-0 m-0 h-0 w-0 appearance-none rounded border text-slate-800 accent-slate-600 opacity-0"
          type="checkbox"
          name="collapse10"
          id="collapse10"
        />
        <div className="-transparent w-full absolute -translate-y-full scale-75 scale-y-0 px-4 py-1 opacity-0 transition-all duration-0 peer-checked:relative peer-checked:translate-y-0 peer-checked:scale-100 peer-checked:scale-y-100 peer-checked:bg-green-50 text-lg text-black peer-checked:opacity-100">
          To make font size responsive, I avoid using fixed units like `px`.
          <br />
          Instead, I use relative units such as `em`, `rem`, `%`, or `vw`/`vh`.
          <br />
          ЁЯФ╕ For example, `rem` is relative to the root elementтАЩs font size,
          which scales better across devices.
          <pre>{`
body {
  font-size: 1rem; /* Equal to 16px if root is 16px */
}
h1 {
  font-size: 2.5rem; /* Scales with root size */
}
`}</pre>
          ЁЯФ╕ Another modern approach is using viewport-based units like `vw`:
          <pre>{`
h1 {
  font-size: 5vw; /* Font size changes based on screen width */
}
`}</pre>
          ЁЯФ╕ I can also use media queries to change font size for different
          screen sizes.
          <pre>{`
@media (max-width: 768px) {
  body {
    font-size: 0.9rem;
  }
}
`}</pre>
          Responsive typography ensures better readability and user experience
          across devices.
          <br />
          <br />
          Font size ржХрзЗ responsive ржХрж░рж╛рж░ ржЬржирзНржп ржЖржорж┐ `px` ржПрж░ ржорждрзЛ fixed unit ржмрзНржпржмрж╣рж╛рж░
          ржХрж░рж┐ ржирж╛ред
          <br />
          ржПрж░ ржкрж░рж┐ржмрж░рзНрждрзЗ ржЖржорж┐ `em`, `rem`, `%`, ржмрж╛ `vw`/`vh` ржПрж░ ржорждрзЛ relative units
          ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж┐ред
          <br />
          ЁЯФ╕ ржпрзЗржоржи, `rem` ржорж╛ржирзЗ рж╣рж▓рзЛ root element ржПрж░ ржЙржкрж░ ржирж┐рж░рзНржнрж░рж╢рзАрж▓ ржлржирзНржЯ рж╕рж╛ржЗржЬ, ржпрзЗржЯрж╛
          рж╕ржм ржбрж┐ржнрж╛ржЗрж╕рзЗ ржнрж╛рж▓рзЛ рж╕рзНржХрзЗрж▓ ржХрж░рждрзЗред
          <pre>{`
body {
  font-size: 1rem; /* Equal to 16px if root is 16px */
}
h1 {
  font-size: 2.5rem; /* Scales with root size */
}
`}</pre>
          ЁЯФ╕ ржЖрж░ржУ ржПржХржЯрж┐ ржЖржзрзБржирж┐ржХ ржкржжрзНржзрждрж┐ рж╣рж▓рзЛ `vw` ржПрж░ ржорждрзЛ viewport units ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛:
          <pre>{`
h1 {
  font-size: 5vw; /* Font size changes based on screen width */
}
`}</pre>
          ЁЯФ╕ ржЖржорж┐ ржкрзНрж░ржпрж╝рзЛржЬржирзЗ media queries ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗржУ ржнрж┐ржирзНржи рж╕рзНржХрзНрж░рж┐ржи рж╕рж╛ржЗржЬрзЗрж░ ржЬржирзНржп
          ржлржирзНржЯ рж╕рж╛ржЗржЬ рж╕рзЗржЯ ржХрж░рж┐:
          <pre>{`
@media (max-width: 768px) {
  body {
    font-size: 0.9rem;
  }
}
`}</pre>
          Responsive font size ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж▓рзЗ рж╕ржм ржбрж┐ржнрж╛ржЗрж╕рзЗ text ржкржбрж╝рждрзЗ рж╕рзБржмрж┐ржзрж╛ рж╣ржпрж╝ ржПржмржВ
          ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзАрж░ ржЕржнрж┐ржЬрзНржЮрждрж╛ ржнрж╛рж▓рзЛ рж╣ржпрж╝ред
        </div>
      </div>
      <div className="flex flex-wrap justify-start overflow-hidden bg-green-100 text-green-600 shadow-md mb-2">
        <label className="grow px-4 md:text-[18px]" htmlFor="collapse11">
          11. Difference between{" "}
          <span className="font-bold">transition and transform.</span>
        </label>
        <input
          className="peer p-0 m-0 h-0 w-0 appearance-none rounded border text-slate-800 accent-slate-600 opacity-0"
          type="checkbox"
          name="collapse11"
          id="collapse11"
        />
        <div className="-transparent w-full absolute -translate-y-full scale-75 scale-y-0 px-4 py-1 opacity-0 transition-all duration-0 peer-checked:relative peer-checked:translate-y-0 peer-checked:scale-100 peer-checked:scale-y-100 peer-checked:bg-green-50 text-lg text-black peer-checked:opacity-100">
          ЁЯФ╕ The `transform` property is used to apply visual effects to an
          element like rotating, scaling, translating, or skewing.
          <br />
          It directly changes the shape, position, or orientation of the
          element.
          <br />
          Example:
          <pre>{`div {
  transform: rotate(45deg);
}`}</pre>
          This rotates the element by 45 degrees instantly.
          <br />
          ЁЯФ╕ On the other hand, `transition` is used to create smooth animation
          effects between property changes over time.
          <br />
          It defines how long and how smoothly a change should occur.
          <br />
          Example:
          <pre>{`div {
  transition: transform 0.5s ease;
}
div:hover {
  transform: scale(1.2);
}
`}</pre>
          Here, the scale will happen gradually in 0.5 seconds when hovered.
          <br />
          So, `transform` defines what change to apply, while `transition`
          defines how the change happens over time.
          <br />
          <br />
          ЁЯФ╕ `transform` ржкрзНрж░ржкрж╛рж░рзНржЯрж┐ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛ рж╣ржпрж╝ ржХрзЛржи element ржХрзЗ rotate, scale,
          move ржмрж╛ skew ржХрж░рж╛рж░ ржЬржирзНржпред
          <br />
          ржПржЯрж╛ рж╕рж░рж╛рж╕рж░рж┐ element ржПрж░ ржЖржХрзГрждрж┐ ржмрж╛ ржЕржмрж╕рзНржерж╛ржи ржкрж░рж┐ржмрж░рзНрждржи ржХрж░рзЗред
          <br />
          ржЙржжрж╛рж╣рж░ржг:
          <pre>{`div {
  transform: rotate(45deg);
}
`}</pre>
          ржПржЦрж╛ржирзЗ element ржЯрж┐ рж╕рж╛ржерзЗ рж╕рж╛ржерзЗ рзкрзл ржбрж┐ржЧрзНрж░рж┐ ржШрзБрж░рзЗ ржпрж╛ржмрзЗред
          <br />
          ЁЯФ╕ ржЕржирзНржпржжрж┐ржХрзЗ, `transition` ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛ рж╣ржпрж╝ ржзрзАрж░рзЗ ржзрзАрж░рзЗ ржкрж░рж┐ржмрж░рзНрждржирзЗрж░
          animation effect рждрзИрж░рж┐ ржХрж░рж╛рж░ ржЬржирзНржпред
          <br />
          ржПржЯрж╛ ржмрж▓рзЗ ржжрзЗржпрж╝, ржПржХржЯрж╛ ржкрж░рж┐ржмрж░рзНрждржи ржХржд рж╕ржорзЯ ржзрж░рзЗ ржПржмржВ ржХржд ржорж╕рзГржгржнрж╛ржмрзЗ рж╣ржмрзЗред
          <br />
          ржЙржжрж╛рж╣рж░ржг:
          <pre>{`div {
  transition: transform 0.5s ease;
}
div:hover {
  transform: scale(1.2);
}
`}</pre>
          ржПржЦрж╛ржирзЗ hover ржХрж░рж▓рзЗ element ржЯрж┐ ржзрзАрж░рзЗ ржзрзАрж░рзЗ ржмрзЬ рж╣ржмрзЗ рзж.рзл рж╕рзЗржХрзЗржирзНржбрзЗред
          <br />
          рждрж╛ржЗ, `transform` рж╣ржЪрзНржЫрзЗ ржХрж┐ ржкрж░рж┐ржмрж░рзНрждржи рж╣ржмрзЗ, ржЖрж░ `transition` рж╣ржЪрзНржЫрзЗ рж╕рзЗржЗ
          ржкрж░рж┐ржмрж░рзНрждржи ржХрзАржнрж╛ржмрзЗ рж╣ржмрзЗ рж╕рзЗржЯрж╛рж░ ржирж┐ржпрж╝ржирзНрждрзНрж░ржгред
        </div>
      </div>
      <div className="flex flex-wrap justify-start overflow-hidden bg-green-100 text-green-600 shadow-md mb-2">
        <label className="grow px-4 md:text-[18px]" htmlFor="collapse12">
          12. How will you{" "}
          <span className="font-bold">
            horizontally and vertically center a div
          </span>{" "}
          inside a div?
        </label>
        <input
          className="peer p-0 m-0 h-0 w-0 appearance-none rounded border text-slate-800 accent-slate-600 opacity-0"
          type="checkbox"
          name="collapse12"
          id="collapse12"
        />
        <div className="-transparent w-full absolute -translate-y-full scale-75 scale-y-0 px-4 py-1 opacity-0 transition-all duration-0 peer-checked:relative peer-checked:translate-y-0 peer-checked:scale-100 peer-checked:scale-y-100 peer-checked:bg-green-50 text-lg text-black peer-checked:opacity-100">
          To center a child {`<div>`} both horizontally and vertically inside a
          parent `{`<div>`}`, I use modern CSS techniques like Flexbox or Grid
          because they are simple and reliable.
          <br />
          ЁЯФ╕ Using Flexbox:
          <pre>{`.parent {
  display: flex;
  justify-content: center; /* Horizontal */
  align-items: center;     /* Vertical */
  height: 100vh; /* or any fixed height */
}`}</pre>
          This method makes the child div perfectly centered in both directions.
          <br />
          ЁЯФ╕ Using Grid:
          <pre>{`.parent {
  display: grid;
  place-items: center;
  height: 100vh;
}`}</pre>
          `place-items: center` is a shorthand for centering both horizontally
          and vertically.
          <br />
          These are clean and responsive solutions that I always prefer over
          older methods like `position: absolute` with `transform: translate()`.
          <br />
          <br />
          ржПржХржЯрж┐ child {`<div>`} ржХрзЗ рждрж╛рж░ parent {`<div>`} ржПрж░ ржнрж┐рждрж░рзЗ horizontally ржПржмржВ
          vertically ржорж╛ржЭржЦрж╛ржирзЗ рж░рж╛ржЦрждрзЗ ржЖржорж┐ Flexbox ржмрж╛ Grid ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж┐ ржХрж╛рж░ржг ржПржЯрж┐ рж╕рж╣ржЬ
          ржУ ржирж┐рж░рзНржнрж░ржпрзЛржЧрзНржпред
          <br />
          ЁЯФ╕ Flexbox ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ:
          <pre>{`.parent {
  display: flex;
  justify-content: center; /* Horizontal */
  align-items: center;     /* Vertical */
  height: 100vh; /* or any fixed height */
}`}</pre>
          ржПржнрж╛ржмрзЗ child div ржЯрж┐ ржкрзБрж░рзЛржкрзБрж░рж┐ ржорж╛ржЭржЦрж╛ржирзЗ ржЪрж▓рзЗ ржЖрж╕рзЗред
          <br />
          ЁЯФ╕ Grid ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ:
          <pre>{`.parent {
  display: grid;
  place-items: center;
  height: 100vh;
}`}</pre>
          `place-items: center` ржПржХ рж▓рж╛ржЗржирзЗ ржЙржнржпрж╝ ржжрж┐ржХрзЗржЗ centering ржХрж░рзЗред
          <br />
          ржкрзБрж░ржирзЛ ржкржжрзНржзрждрж┐ ржпрзЗржоржи `position: absolute` ржПржмржВ `transform: translate()` ржПрж░
          ржЪрзЗржпрж╝рзЗ Flexbox ржмрж╛ Grid ржЕржирзЗржХ ржнрж╛рж▓рзЛ ржПржмржВ cleaner solutionред
          <br />
        </div>
      </div>
      <div className="flex flex-wrap justify-start overflow-hidden bg-green-100 text-green-600 shadow-md mb-2">
        <label className="grow px-4 md:text-[18px]" htmlFor="collapse13">
          13. Difference between <span className="font-bold">id and class</span>
          ?
        </label>
        <input
          className="peer p-0 m-0 h-0 w-0 appearance-none rounded border text-slate-800 accent-slate-600 opacity-0"
          type="checkbox"
          name="collapse13"
          id="collapse13"
        />
        <div className="-transparent w-full absolute -translate-y-full scale-75 scale-y-0 px-4 py-1 opacity-0 transition-all duration-0 peer-checked:relative peer-checked:translate-y-0 peer-checked:scale-100 peer-checked:scale-y-100 peer-checked:bg-green-50 text-lg text-black peer-checked:opacity-100">
          In CSS, both `id` and `class` are used to select and style HTML
          elements, but they have different purposes and rules.
          <br />
          ЁЯФ╕ `id` is unique. It should be used for one specific element only.
          <br />
          ЁЯФ╕ `class` can be used on multiple elements for applying the same
          style.
          <br />
          ЁЯФ╕ We use `#` to target an `id` and `.` to target a `class` in CSS.
          <br />
          ЁЯФ╕ `id` has higher specificity than `class`, so if both are applied,
          `id` will take priority.
          <br />
          ЁЯФ╕ `id` is often used when JavaScript needs to target a specific
          element.
          <br />
          ЁЯФ╕ `class` is more reusable and recommended for styling similar
          elements.
          <br />
          ЁЯЧгя╕П Example:
          <pre>{`<div id="header"></div>
<div class="menu-item"></div>
<div class="menu-item"></div>
`}</pre>
          <br />
          CSS-ржП `id` ржПржмржВ `class` ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ HTML element ржЧрзБрж▓рзЛржХрзЗ style ржХрж░рж╛ рж╣ржпрж╝,
          ржХрж┐ржирзНрждрзБ ржПржжрзЗрж░ ржХрж╛ржЬ ржПржмржВ ржирж┐ржпрж╝ржо ржЖрж▓рж╛ржжрж╛ред
          <br />
          ЁЯФ╕ `id` ржПржХржЯрж┐ ржЗржЙржирж┐ржХ ржирж╛ржо ржпрж╛ рж╢рзБржзрзБржорж╛рждрзНрж░ ржПржХржЯрж┐ element ржПрж░ ржЬржирзНржп ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛
          ржЙржЪрж┐рждред
          <br />
          ЁЯФ╕ `class` ржПржХрж╛ржзрж┐ржХ element ржПрж░ ржЬржирзНржп ржПржХржЗ style ржкрзНрж░ржпрж╝рзЛржЧ ржХрж░рждрзЗ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛
          ржпрж╛ржпрж╝ред
          <br />
          ЁЯФ╕ CSS-ржП `id` рж╕рж┐рж▓рзЗржХрзНржЯ ржХрж░рждрзЗ `#` ржПржмржВ `class` рж╕рж┐рж▓рзЗржХрзНржЯ ржХрж░рждрзЗ `.` ржмрзНржпржмрж╣рж╛рж░
          ржХрж░рж┐ред
          <br />
          ЁЯФ╕ `id` ржПрж░ specificity ржмрзЗрж╢рж┐, рждрж╛ржЗ `id` ржПржмржВ `class` ржПржХрж╕рж╛ржерзЗ ржерж╛ржХрж▓рзЗ `id` ржПрж░
          style ржкрзНрж░рж╛ржзрж╛ржирзНржп ржкрж╛ржмрзЗред
          <br />
          ЁЯФ╕ `id` рж╕рж╛ржзрж╛рж░ржгржд JavaScript ржПрж░ ржорж╛ржзрзНржпржорзЗ ржХрзЛржи ржирж┐рж░рзНржжрж┐рж╖рзНржЯ element ржЯрж╛рж░рзНржЧрзЗржЯ
          ржХрж░рждрзЗ ржмрзНржпржмрж╣рзГржд рж╣ржпрж╝ред
          <br />
          ЁЯФ╕ `class` ржмрж╛рж░ржмрж╛рж░ ржмрзНржпржмрж╣рж╛рж░ржпрзЛржЧрзНржп ржПржмржВ styling ржПрж░ ржЬржирзНржп ржмрзЗрж╢рж┐ preferredред
          <br />
          ЁЯЧгя╕П ржЙржжрж╛рж╣рж░ржг:
          <pre>{`<div id="header"></div>
<div class="menu-item"></div>
<div class="menu-item"></div>
`}</pre>
        </div>
      </div>
      <div className="flex flex-wrap justify-start overflow-hidden bg-green-100 text-green-600 shadow-md mb-2">
        <label className="grow px-4 md:text-[18px]" htmlFor="collapse14">
          14. CSS <span className="font-bold">margin vs padding</span>.
        </label>
        <input
          className="peer p-0 m-0 h-0 w-0 appearance-none rounded border text-slate-800 accent-slate-600 opacity-0"
          type="checkbox"
          name="collapse14"
          id="collapse14"
        />
        <div className="-transparent w-full absolute -translate-y-full scale-75 scale-y-0 px-4 py-1 opacity-0 transition-all duration-0 peer-checked:relative peer-checked:translate-y-0 peer-checked:scale-100 peer-checked:scale-y-100 peer-checked:bg-green-50 text-lg text-black peer-checked:opacity-100">
          In CSS, both `margin` and `padding` are used for spacing, but they
          serve different purposes.
          <br />
          ЁЯФ╕ `Margin` is the space outside the element's border.
          <br />
          ЁЯФ╕ It creates space between the element and other elements.
          <br />
          ЁЯФ╕ `Padding` is the space inside the element, between the content and
          the border.
          <br />
          ЁЯФ╕ It increases the space within the element itself.
          <br />
          ЁЯФ╕ `Margin` can collapse (vertical margins of two elements can
          overlap), but `padding` does not collapse.
          <br />
          ЁЯФ╕ Both can be applied in top, right, bottom, and left directions
          individually or together.
          <br />
          ЁЯЧгя╕П Example:
          <br />
          margin: 20px;
          <br />
          padding: 10px;
          <br />
          <br />
          CSS-ржП `margin` ржПржмржВ `padding` ржЙржнржпрж╝ржЗ spacing ржПрж░ ржЬржирзНржп ржмрзНржпржмрж╣рзГржд рж╣ржпрж╝, рждржмрзЗ
          ржЙржжрзНржжрзЗрж╢рзНржп ржЖрж▓рж╛ржжрж╛ред
          <br />
          ЁЯФ╕ `Margin` рж╣рж▓рзЛ element ржПрж░ ржмрж╛рж╣рж┐рж░рзЗрж░ ржжрж┐ржХрзЗрж░ ржлрж╛ржБржХрж╛ ржЬрж╛ржпрж╝ржЧрж╛ред
          <br />
          ЁЯФ╕ ржПржЯрж┐ ржПржХржЯрж┐ element ржПржмржВ ржЕржирзНржп element ржПрж░ ржоржзрзНржпрзЗ ржжрзВрж░рждрзНржм рждрзИрж░рж┐ ржХрж░рзЗред
          <br />
          ЁЯФ╕ `Padding` рж╣рж▓рзЛ element ржПрж░ ржнрж┐рждрж░рзЗрж░ ржжрж┐ржХрзЗрж░ ржлрж╛ржБржХрж╛ ржЬрж╛ржпрж╝ржЧрж╛, content ржПржмржВ
          border ржПрж░ ржоржзрзНржпрзЗред
          <br />
          ЁЯФ╕ ржПржЯрж┐ element ржПрж░ ржнрж┐рждрж░рзЗ рж╕рзНржерж╛ржи ржмрж╛ржбрж╝рж╛ржпрж╝ред
          <br />
          ЁЯФ╕ `Margin` ржХржЦржиржУ ржХржЦржиржУ collapse ржХрж░рзЗ (ржжрзБржЗ element ржПрж░ vertical margin ржПржХ
          рж╣ржпрж╝рзЗ ржпрж╛ржпрж╝), ржХрж┐ржирзНрждрзБ `padding` ржХржЦржиржУ collapse ржХрж░рзЗ ржирж╛ред
          <br />
          ЁЯФ╕ ржЙржнржпрж╝ржЗ top, right, bottom, ржПржмржВ left ржЖрж▓рж╛ржжрж╛ржнрж╛ржмрзЗ ржмрж╛ ржПржХрж╕рж╛ржерзЗ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж╛
          ржпрж╛ржпрж╝ред
          <br />
          ЁЯЧгя╕П ржЙржжрж╛рж╣рж░ржг:
          <br />
          margin: 20px;
          <br />
          padding: 10px;
        </div>
      </div>
    </Container>
  );
};

export default QnA_CSS;
